
#_____________________________________________________________
# Assignment 2
#____________________________________________________________
'''
1. Define a Book class with attributes like title, author, and no_of_pages (all strings). 
Implement constructor(s) to initialize these attributes when creating a new Book object. 
Add a method called describe_book() that prints a summary of the book's information.
'''

class BOOK:
    def  __init__(self, title, author, pages, price):
        self.__title = title
        self.__author = author
        self._no_of_pages = pages
        self.price = price
    
    def describe_book(self):
        print(f"Title: {self.__title}")
        print(f"Author: {self.__author}")
        print(f"Number of Pages: {self._no_of_pages}")
        print(f"Price: ${self.price}")

b1 = BOOK("hi", "helo", 420, 1200)
b1.describe_book()

'''
Title: hi
Author: helo
Number of Pages: 420
Price: $1200
'''
-------------------------------------------------------

'''
10. Write a python program to handle the ZeroDivisionError exception.
'''

def divide_numbers(a, b):
    try:
        result = a / b
        print(f"Result of division: {result}")
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")


divide_numbers(10, 0)

divide_numbers(20, 5)

'''
Error: Division by zero is not allowed.
Result of division: 4.0
'''
-------------------------------------------------------

'''
2. Define class student with attributes like First_name, Last_name, Course, batch_year, result). 
Apply constructor (s) to initialize the attributes while creating new student object. Here, 
batch_year must be passing year and result must be PASS or FAIL. Add a method to calculate 
total number of FAIL students. (static method).
'''
class Student:
    def __init__(self, First_name, Last_name, Course, batch_year, result):
        self.First_name = First_name
        self.Last_name = Last_name
        self.Course = Course
        self.batch_year = batch_year
        self.result = result

    @staticmethod
    def count_fail_students(students):
        return len([student for student in students if student.result == 'FAIL'])
    

# Example usage:
students = [
    Student('hi', 'helo', 'CS', 2020, 'PASS'),
    Student('just', 'kidding', 'CS', 2020, 'FAIL'),
    Student('no', 'never', 'CS', 2020, 'PASS'),
    Student('workin', 'progress', 'CS', 2020, 'FAIL'),
]

num_fail_students = Student.count_fail_students(students)
print(f'Number of FAIL students: {num_fail_students}')

'''
Number of FAIL students: 2
'''
-------------------------------------------------------

'''
3. Define class Surface_Area which includes three methods with the name Calculate_area() 
(Function Overloading). Each method accepts parameter(s) to calculate area of circle, 
rectangle and triangle. Display the result from calling of respective Calculate_area() as per 
the userâ€™s request. Design the menu-driven program.
'''

# class Surface_Area:

#     def Calculate_area(self, length, breadth):
#         return length * breadth

#     def Calculate_area(self, base, height, default=1):
#         return 0.5 * base * height
    
#     def Calculate_area(self, radius):
#         return 3.14 * radius ** 2


class Surface_Area:

    def Calculate_area(self, *args):
        if len(args) == 1:
            # Calculate area of circle (args[0] = radius)
            radius = args[0]
            return 3.14 * radius ** 2
        elif len(args) == 2:
            # Calculate area of rectangle (args[0] = length, args[1] = breadth)
            length, breadth = args
            return length * breadth
        elif len(args) == 3:
            # Calculate area of triangle (args[0] = base, args[1] = height, args[2] = default)
            base, height, _ = args  # Ignore the third argument (default)
            return 0.5 * base * height
        else:
            raise ValueError("Invalid number of arguments")

def main():
    surface_area = Surface_Area()
    while True:
        print("-----------------------------------")
        print("1. Calculate area of circle")
        print("2. Calculate area of rectangle")
        print("3. Calculate area of triangle")
        print("4. Exit")
        choice = int(input("Enter your choice: "))
        print("-----------------------------------")
        if choice == 1:
            radius = float(input("Enter radius: "))
            print("Area of circle:", surface_area.Calculate_area(radius))
        elif choice == 2:
            length = float(input("Enter length: "))
            breadth = float(input("Enter breadth: "))
            print("Area of rectangle:", surface_area.Calculate_area(length, breadth))
        elif choice == 3:
            base = float(input("Enter base: "))
            height = float(input("Enter height: "))
            print("Area of triangle:", surface_area.Calculate_area(base, height, 1))
        elif choice == 4:
            break
        else:
            print("Invalid choice. Please try again.")

main()

'''
-----------------------------------
1. Calculate area of circle
2. Calculate area of rectangle
3. Calculate area of triangle
4. Exit
Enter your choice: 1
-----------------------------------
Enter radius: 2
Area of circle: 12.56
-----------------------------------
1. Calculate area of circle
2. Calculate area of rectangle
3. Calculate area of triangle
4. Exit
Enter your choice: 2
-----------------------------------
Enter length: 2
Enter breadth: 3
Area of rectangle: 6.0
-----------------------------------
1. Calculate area of circle
2. Calculate area of rectangle
3. Calculate area of triangle
4. Exit
Enter your choice: 3
-----------------------------------
Enter base: 5
Enter height: 6
Area of triangle: 15.0
-----------------------------------
1. Calculate area of circle
2. Calculate area of rectangle
3. Calculate area of triangle
4. Exit
Enter your choice: 4
-----------------------------------
'''
-------------------------------------------------------

'''
4. Write a python program to create employee class that has employee details (id, name, 
salary) and design a function that reads the employee id from the user and display employee 
details along with the Net salary after adding DA(15%), MA(5%), HRA(20%) and deducting 
PA(12%) from the basic salary.
'''

class Employee:
    def __init__(self, emp_id, name, salary):
        self.emp_id = emp_id
        self.name = name
        self.salary = salary

    def calculate_net_salary(self):
        # Constants for percentage values
        da_percent = 15
        ma_percent = 5
        hra_percent = 20
        pa_percent = 12

        # Calculate allowances and deductions
        da_amount = (da_percent / 100) * self.salary
        ma_amount = (ma_percent / 100) * self.salary
        hra_amount = (hra_percent / 100) * self.salary
        pa_amount = (pa_percent / 100) * self.salary

        # Calculate net salary
        net_salary = self.salary + da_amount + ma_amount + hra_amount - pa_amount

        # Display employee details and net salary
        print("\nEmployee Details:")
        print("Employee ID:", self.emp_id)
        print("Name:", self.name)
        print("Basic Salary:", self.salary)
        print("DA (15%):", da_amount)
        print("MA (5%):", ma_amount)
        print("HRA (20%):", hra_amount)
        print("PA (12%):", pa_amount)
        print("Net Salary:", net_salary)



# Create an employee object
emp_id = input("Enter Employee ID: ")
name = input("Enter Employee Name: ")
salary = float(input("Enter Basic Salary: "))

employee = Employee(emp_id, name, salary)

# Calculate and display net salary
employee.calculate_net_salary()

'''
Enter Employee ID: 1
Enter Employee Name: hi
Enter Basic Salary: 100

Employee Details:
Employee ID: 1
Name: hi
Basic Salary: 100.0
DA (15%): 15.0
MA (5%): 5.0
HRA (20%): 20.0
PA (12%): 12.0
Net Salary: 128.0
'''
-------------------------------------------------------

'''
5. Write a python program to overload the multiplication (*) operator that can act on objects 
of NUM class having two members as no1 and no2.
'''
class Num:
    def __init__(self, no1, no2):
        self.no1 = no1
        self.no2 = no2

    def __mul__(self, other):
        # Define the behavior of the multiplication operator (*) with Num objects
        if isinstance(other, Num):
            # If 'other' is also an instance of Num, perform element-wise multiplication
            return Num(self.no1 * other.no1, self.no2 * other.no2)
        elif isinstance(other, (int, float)):
            # If 'other' is a scalar (int or float), multiply each element by the scalar
            return Num(self.no1 * other, self.no2 * other)
        else:
            raise TypeError(f"Unsupported operand type(s) for *: 'Num' and '{type(other).__name__}'")

    def __rmul__(self, other):
        # Define the behavior when the left-hand operand is a scalar and the right-hand operand is a Num object
        if isinstance(other, (int, float)):
            return Num(self.no1 * other, self.no2 * other)
        else:
            raise TypeError(f"Unsupported operand type(s) for *: '{type(other).__name__}' and 'Num'")

    def __str__(self):
        # Define how the object should be represented as a string
        return f"Num({self.no1 * self.no2})"


num1 = Num(2, 3)
num2 = Num(4, 5)

result1 = num1 * num2
print("Multiplication of num1 and num2:", result1)

result2 = num1 * 2
print("Multiplication of num1 with scalar:", result2)

result3 = 3 * num2
print("Multiplication of scalar with num2:", result3)

'''
Multiplication of num1 and num2: Num(120)
Multiplication of num1 with scalar: Num(24)
Multiplication of scalar with num2: Num(180)
'''
-------------------------------------------------------

'''
6. Write a python program to create class time with attributes hour and minutes. Add 
constructor(s) to initialize the attributes. Overload '+' operator to add two time (hh:mm) 
type objects to show new added time.
'''

class Time:
    def __init__(self, hour=0, minutes=0):
        self.hour = hour
        self.minutes = minutes

    def __add__(self, other):
        # Check if 'other' is also a Time object
        if isinstance(other, Time):
            # Calculate total minutes
            total_minutes = self.minutes + other.minutes
            carry_hour = total_minutes // 60  # Calculate hours to carry over
            final_minutes = total_minutes % 60  # Calculate final minutes after carrying over

            # Calculate total hours
            total_hours = self.hour + other.hour + carry_hour

            return Time(total_hours, final_minutes)
        else:
            # Raise TypeError if 'other' is not a Time object
            raise TypeError("Unsupported operand type(s) for +: 'Time' and '{}'".format(type(other).__name__))

    def __str__(self):
        # Format the time as hh:mm
        return f"{self.hour:02}:{self.minutes:02}"


time1 = Time(3, 45)
time2 = Time(1, 30)

# Adding two Time objects using the '+' operator
result_time = time1 + time2
print("Sum of time1 and time2:", result_time)

'''
Sum of time1 and time2: 05:15
'''

-------------------------------------------------------

'''
7. Creating a Bank Account Class with Inheritance
    >   Define a base class Account with attributes like account_no (string) and balance 
        (float). Implement constructor method in Account to initialize these attributes.
    >   Create a subclass BankAccount that inherits from Account. 
    >   Add a method called deposit(amount) to BankAccount to add funds to the balance.
    >   Optionally, you can add a withdraw(amount) method that subtracts funds from the 
        balance while considering overdraft protection (if applicable).
'''

class Account:
    def __init__(self, account_no, balance=0.0):
        self.account_no = account_no
        self.balance = balance

    def __str__(self):
        return f"Account Number: {self.account_no}, Balance: Rs.{self.balance:.2f}"

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited Rs.{amount:.2f} into account {self.account_no}. New balance: Rs.{self.balance:.2f}")
        else:
            print("Invalid deposit amount. Please enter a positive value.")

    def withdraw(self, amount):
        if amount > 0:
            if self.balance >= amount:
                self.balance -= amount
                print(f"Withdrew Rs.{amount:.2f} from account {self.account_no}. New balance: Rs.{self.balance:.2f}")
            else:
                print("Insufficient funds. Withdrawal amount exceeds available balance.")
        else:
            print("Invalid withdrawal amount. Please enter a positive value.")


class BankAccount(Account):
    def __init__(self, account_no, balance=0.0):
        super().__init__(account_no, balance)

    # Override the withdraw method to include overdraft protection
    def withdraw(self, amount):
        overdraft_limit = 100.0  # Define overdraft protection limit

        if amount > 0:
            if self.balance + overdraft_limit >= amount:
                self.balance -= amount
                print(f"Withdrew Rs.{amount:.2f} from account {self.account_no}. New balance: Rs.{self.balance:.2f}")
            else:
                print("Withdrawal amount exceeds available balance including overdraft protection.")
        else:
            print("Invalid withdrawal amount. Please enter a positive value.")


bank_account = BankAccount("123456789", 100.0)

print(bank_account)

bank_account.deposit(500.0)

bank_account.withdraw(300.0)

bank_account.withdraw(500.0)

bank_account.withdraw(-50.0)

'''
Account Number: 123456789, Balance: Rs.100.00
Deposited Rs.500.00 into account 123456789. New balance: Rs.600.00
Withdrew Rs.300.00 from account 123456789. New balance: Rs.300.00
Withdrawal amount exceeds available balance including overdraft protection.
Invalid withdrawal amount. Please enter a positive value.
'''
-------------------------------------------------------

'''
8. Write a python program to create a CAR abstract class that contains an instance variable, a 
concrete method and two abstract methods. Also derive Maruti sub class from the CAR 
class and show implementation of abstract methods of CAR in subclass.
'''

from abc import ABC, abstractmethod

# Define abstract base class Car
class Car(ABC):
    def __init__(self, model):
        self.model = model

    # Concrete method
    def show_model(self):
        print(f"Car Model: {self.model}")

    # Abstract methods to be implemented by subclasses
    @abstractmethod
    def start(self):
        pass

    @abstractmethod
    def stop(self):
        pass

# Define subclass Maruti that inherits from Car
class Maruti(Car):
    def __init__(self, model):
        super().__init__(model)

    # Implementation of abstract method start
    def start(self):
        print(f"{self.model} car started.")

    # Implementation of abstract method stop
    def stop(self):
        print(f"{self.model} car stopped.")


maruti_car = Maruti("Swift")

maruti_car.show_model()

maruti_car.start()
maruti_car.stop()

'''
Car Model: Swift
Swift car started.
Swift car stopped.
'''
-------------------------------------------------------

'''
9. Create an interface Shape with methods area() and perimeter().
'''
from abc import ABC, abstractmethod

# Define abstract base class Shape with abstract methods area() and perimeter()
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

# Example usage with a concrete subclass Circle
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius**2  # Calculate area of circle

    def perimeter(self):
        return 2 * 3.14 * self.radius  # Calculate perimeter (circumference) of circle

# Example usage with a concrete subclass Rectangle
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width  # Calculate area of rectangle

    def perimeter(self):
        return 2 * (self.length + self.width)  # Calculate perimeter of rectangle

circle = Circle(5)
print("Circle - Area:", circle.area())
print("Circle - Perimeter:", circle.perimeter())

rectangle = Rectangle(4, 6)
print("Rectangle - Area:", rectangle.area())
print("Rectangle - Perimeter:", rectangle.perimeter())

'''
Circle - Area: 78.5
Circle - Perimeter: 31.400000000000002
Rectangle - Area: 24
Rectangle - Perimeter: 20
'''
-------------------------------------------------------

import os

# Open the output file in write mode
with open('print_assignment.txt', 'w') as f:
    # Iterate over all files in the current directory
    for filename in os.listdir('.'):
        # Check if the file is a Python file
        if filename.endswith('.py'):
            # Open the file in read mode
            with open(filename, 'r') as file:
                # Read the contents of the file
                contents = file.read()
                
                f.write('\n')
                # Write the contents to the output file
                f.write(contents)
                # Add a blank line between files
                f.write('\n-------------------------------------------------------\n')

print("Python files have been written to print_assignment.txt")
-------------------------------------------------------
